# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|

	config.vm.box = "bento/ubuntu-16.04"

  config.vm.define "kube-01" do |kube|
    kube.vm.hostname = "kube-01"
    kube.vm.network "private_network", ip: "192.168.200.10"
    config.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", "2048"]
       vb.customize ["modifyvm", :id, "--cpus", "2"]
    end  
    kube.vm.provision "shell", inline: $script
		kube.vm.provision "shell", inline: $script_master 
		kube.vm.provision "shell", inline: "swapoff -a", run: "always"
  end
 
 config.vm.define "kube-02" do |kube|
    kube.vm.hostname = "kube-02"
    kube.vm.network "private_network", ip: "192.168.200.11"
    config.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", "2048"]
       vb.customize ["modifyvm", :id, "--cpus", "1"]
    end
    kube.vm.provision "shell", inline: $script
    kube.vm.provision "shell", inline: $script_worker
		kube.vm.provision "shell", inline: "swapoff -a", run: "always"
  end

 config.vm.define "kube-03" do |kube|
    kube.vm.hostname = "kube-03"
    kube.vm.network "private_network", ip: "192.168.200.12"
    config.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", "2048"]
       vb.customize ["modifyvm", :id, "--cpus", "1"]
    end
    kube.vm.provision "shell", inline: $script
    kube.vm.provision "shell", inline: $script_worker
		kube.vm.provision "shell", inline: "swapoff -a", run: "always"
  end

$script = <<SCRIPT
echo I am provisioning...
cp /vagrant/hosts /etc/hosts
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y -qq docker.io kubelet kubeadm kubectl kubernetes-cni
rm -rf /var/lib/kubelet/*
sysctl net.bridge.bridge-nf-call-iptables=1
echo I am turning off swap...
# keep swap off after reboot by making sure it's not in fstab
# TODO: This is not working. Needs fixing. Fixed for now with always run provision script.
# sed -i '/swap/s/^\(.*\)$//g' /etc/fstab
swapoff -a
echo I am joining NFS...
apt-get -y -qq install nfs-common
SCRIPT

$script_master = <<SCRIPT
echo I am provisioning the master...
# Get the IP address that VirtualBox has given this VM
IPADDR=`ifconfig eth1 | grep Mask | awk '{print $2}'| cut -f2 -d:`
echo This VM has IP address $IPADDR
# Set up Kubernetes
echo I am initializing Kubernetes master
NODENAME=$(hostname -s)
kubeadm init --apiserver-advertise-address $IPADDR --pod-network-cidr 192.168.0.0/16 --node-name $NODENAME | tee /vagrant/master_init_log
kubejoin=$(grep -e "kubeadm join" /vagrant/master_init_log)
cat <<EOF >/vagrant/join.sh
#!/bin/bash
$kubejoin
EOF
# Set up admin creds for the vagrant user
echo I am configuring vagrant user
sudo --user=vagrant mkdir -p /home/vagrant/.kube
cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config
# Copying the admin credentials to shared location
mkdir -p /vagrant/.kube
cp /etc/kubernetes/admin.conf /vagrant/.kube/config
# Set up CNI
echo I am setting up CNI
sudo -i --user=vagrant kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
# Set up Monitoring/Metrics Server
echo I am setting up Metrics
sudo --user=vagrant mkdir -p /home/vagrant/metrics
sudo -i --user=vagrant git clone https://github.com/kubernetes-incubator/metrics-server.git /home/vagrant/metrics
sudo -i --user=vagrant kubectl apply -f /home/vagrant/metrics/deploy/1.8+/
# Set up Dashboard
echo I am setting up Dashboard
sudo -i --user=vagrant kubectl apply -f "https://gist.githubusercontent.com/allir/5dec65c085a1682ad57aad042901f2ec/raw/c5c8397708c884b52a4e6173b42da42668b9ae24/kubernetes-dashboard-http.yaml"
# Set up Visualizer
echo I am setting up Visualizer
sudo --user=vagrant mkdir -p /home/vagrant/kubeview
sudo -i --user=vagrant git clone https://github.com/allir/kube-ops-view /home/vagrant/kubeview
sudo -i --user=vagrant kubectl apply -f /home/vagrant/kubeview/deploy
SCRIPT

$script_worker = <<SCRIPT
echo I am provisioning a worker...
chmod u+x /vagrant/join.sh
/vagrant/join.sh
SCRIPT

end
